{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","cancelToken","useState","postText","setPostText","postGif","setGif","gifs","setGifs","gifstring","setGifstring","posts","setPosts","handleGifSearch","e","a","target","value","cancel","axios","CancelToken","source","get","process","token","gifData","data","className","type","id","tabIndex","onSubmit","preventDefault","post","nanoid","text","gif","console","log","Array","isArray","placeholder","onChange","htmlFor","src","images","original","url","alt","title","href","role","map","onClick","length","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.a7692351.chunk.js","sourcesContent":["import React, { useState } from \"react\";\r\nimport axios from \"axios\";\r\nimport { nanoid } from \"nanoid\";\r\n\r\nconst App = () => {\r\n  let cancelToken;\r\n\r\n  const url = \"https://api.giphy.com/v1/gifs/search\";\r\n  const [postText, setPostText] = useState(\"\");\r\n  const [postGif, setGif] = useState({});\r\n  const [gifs, setGifs] = useState([]);\r\n  const [gifstring, setGifstring] = useState(\"\");\r\n\r\n  const [posts, setPosts] = useState([]);\r\n\r\n  const handleGifSearch = async (e) => {\r\n    setGifstring(e.target.value);\r\n\r\n    if (typeof cancelToken != typeof undefined) {\r\n      cancelToken.cancel(\"cancelling previous request\");\r\n    }\r\n    cancelToken = axios.CancelToken.source();\r\n\r\n    var gifData = await axios.get(\r\n      `${url}?api_key=${process.env.REACT_APP_GIPHY_KEY}&q=${gifstring}&limit=5`,\r\n      { cancelToken: cancelToken.token }\r\n    );\r\n\r\n    setGifs(gifData.data.data);\r\n  };\r\n\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault();\r\n\r\n    const post = {\r\n      id: nanoid(),\r\n      text: postText,\r\n      gif: postGif,\r\n    };\r\n\r\n    setPosts([...posts, post]);\r\n    console.log(posts);\r\n    console.log(Array.isArray(posts));\r\n    setPostText(\"\");\r\n    setGif({});\r\n  };\r\n\r\n  const handleClose = () => {\r\n    setPostText(\"\");\r\n    setGif({});\r\n  };\r\n\r\n  return (\r\n    <div className=\"container container-fluid\">\r\n      <nav className=\"navbar navbar-expand-lg navbar-light bg-light\">\r\n        <div className=\"container-fluid d-flex justify-content-center\">\r\n          <h1 className=\"mx-3\">FB Type Post</h1>\r\n          <button\r\n            type=\"button\"\r\n            className=\"btn btn-primary\"\r\n            data-bs-toggle=\"modal\"\r\n            data-bs-target=\"#exampleModal\"\r\n          >\r\n            Add Post\r\n          </button>\r\n\r\n          <div\r\n            className=\"modal fade\"\r\n            id=\"exampleModal\"\r\n            tabIndex=\"-1\"\r\n            aria-labelledby=\"exampleModalLabel\"\r\n            aria-hidden=\"true\"\r\n          >\r\n            <div className=\"modal-dialog\">\r\n              <div className=\"modal-content\">\r\n                <div className=\"modal-header\">\r\n                  <h5 className=\"modal-title\" id=\"exampleModalLabel\">\r\n                    Add Post\r\n                  </h5>\r\n                  <button\r\n                    type=\"button\"\r\n                    className=\"btn-close\"\r\n                    data-bs-dismiss=\"modal\"\r\n                    aria-label=\"Close\"\r\n                  ></button>\r\n                </div>\r\n                <form onSubmit={handleSubmit}>\r\n                  <div className=\"modal-body\">\r\n                    <div className=\"form-floating\">\r\n                      <textarea\r\n                        className=\"form-control\"\r\n                        placeholder=\"Leave a comment here\"\r\n                        id=\"floatingTextarea2\"\r\n                        value={postText}\r\n                        onChange={(e) => setPostText(e.target.value)}\r\n                      />\r\n                      <label htmlFor=\"floatingTextarea2\">\r\n                        What's on your mind?\r\n                      </label>\r\n                      {postGif && (\r\n                        <img\r\n                          src={postGif.images?.original?.url}\r\n                          alt={postGif.title}\r\n                          className=\"mt-3\"\r\n                        />\r\n                      )}\r\n                    </div>\r\n                    <p className=\"mt-3\">\r\n                      <a\r\n                        className=\"btn btn-outline-primary\"\r\n                        data-bs-toggle=\"collapse\"\r\n                        href=\"#collapseExample\"\r\n                        role=\"button\"\r\n                        aria-expanded=\"false\"\r\n                        aria-controls=\"collapseExample\"\r\n                      >\r\n                        GIF\r\n                      </a>\r\n                    </p>\r\n                    <div className=\"collapse\" id=\"collapseExample\">\r\n                      <input\r\n                        type=\"text\"\r\n                        className=\"form-control\"\r\n                        value={gifstring}\r\n                        onChange={(e) => handleGifSearch(e)}\r\n                      />\r\n                      {gifs &&\r\n                        gifs.map((gif) => (\r\n                          <div\r\n                            className=\"card card-body\"\r\n                            key={gif.id}\r\n                            onClick={() => {\r\n                              setGif(gif);\r\n                              setGifstring(\"\");\r\n                              setGifs(\"\");\r\n                            }}\r\n                          >\r\n                            <img\r\n                              src={gif.images?.original?.url}\r\n                              alt={gif.title}\r\n                            />\r\n                          </div>\r\n                        ))}\r\n                    </div>\r\n                  </div>\r\n                  <div className=\"modal-footer\">\r\n                    <button\r\n                      type=\"button\"\r\n                      className=\"btn btn-secondary\"\r\n                      data-bs-dismiss=\"modal\"\r\n                      onClick={handleClose}\r\n                    >\r\n                      Close\r\n                    </button>\r\n                    <button type=\"submit\" className=\"btn btn-primary\">\r\n                      Post\r\n                    </button>\r\n                  </div>\r\n                </form>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </nav>\r\n\r\n      {posts.length === 0 ? (\r\n        <>\r\n          <h1 className=\"text-center\">No posts to show</h1>\r\n        </>\r\n      ) : (\r\n        <div className=\"container d-flex justify-content-center mt-4\">\r\n          <div className=\"row\">\r\n            <div className=\"col\">\r\n              {Array.isArray(posts) &&\r\n                posts.map((post) => (\r\n                  <div className=\"card mb-3 \" key={post.id}>\r\n                    <div className=\"card-title\">\r\n                      <p className=\"mt-3 text-center fs-4\">{post.text}</p>\r\n                    </div>\r\n                    <div className=\"card-body\">\r\n                      <img\r\n                        src={post.gif?.images?.original?.url}\r\n                        alt={post.gif?.title}\r\n                      />\r\n                    </div>\r\n                  </div>\r\n                ))}\r\n            </div>\r\n          </div>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}